[Mar 4]

What the fuck am I doing?

What am I making? A noise visualizer. I will visualize my noise, and also perlin noise.
I also want to see if I was right about perlin noise justing being my noise, but with a 
tilting table (i.e visualize the table).

I guess program will need to be 3D and 2D. 2D for 1D and 2D noise, and 3D for 3D noise.

Ok, I'm starting to think this won't be some quick 1-3 day project, maybe, but it seems like 
it will take, it shouldn't take more then 2 weeks. I doubt it should even take more then 1 week.

Tasks - Expected Time
--------------------------
Setting up OpenGL program - 1-3 days
Adding noise visualization - 1-3 days

Total: 2-6 days (~1 week)

Thats if I work hard! Should I drop everything else? IDK. 

Should I start from scratch, or pig back off some other project I've made, or other peoples code?
I could. Making it from scratch shouldn't be too hard, and it would build my skills up too. I think 
I should, and want to, build it from scratch. So it will use OpenGL, GLFW, and GLM (main dependencies).

What else am I working on right now?
- Going through 6837 lectures
- 3200 A2 

What do I get out of doing this?
- Implement and practice noise
    - Will be able to build minecraft clone
- Practice programming skills
    - Build a program from scratch, 100% on my own.
- Cool unique project to show off! 

HELL YEAH!

-----------------------------------------------------------------------------------------------------------------

What am I building?
- 2D visualization: 
    - 1D perlin noise, value noise, octave noise
- 3D visualization:
    - 2D perlin, value, and octave
    - 3D perlin, value, and octave
- Text that says what going on
- Users can input to change what they see

What it won't have
- a movable camera (some default)

Alright, lets start? Yes. Where? What? 

To Do:
- Hello world
- Window opening
- Drawing hello triangle
- Set up shaders
- VBOs / geometry renders (cuboids, planes, lines, text, squares)


What should window do?
    - Should it also handle input? Not handle, but make it eaisly
      accesible?
    - error_callback for glfw?

The window is opening and staying open! Now what? Need to start rendering shit. Lets first start in 2D.
First, need to import the shaders. The geometric renders will need them! First, lets render a square. I guess
orthogrphic will be fine first. THE PLAN: set up the geomtric renderes, then I can start working on the noise shit (The good shit).

How to the shader? NLG, I just want to copy & paste it from some other project that has a Shader class.

Shit is going good! Shader class is tested! I'm going on break soon. Should I? Yes, a quick 10m break. NO YT, music sure, but no videos.
What to do next? Render a square.


Where am I going? I think I should aim for visualizing the 1D noise first.First, off. I could just copy and past in line, and square from AI 
project like I copied the Shader class. Should I? How about I add copy over Square, refactor and clean it up. Then I draw a square. To see 
everything is working (shaders, and square). 

Fuck squares!

LINE: could refactor out model matrix.

Refactoring Ideas:
    - refactor out model matrix in LineRender
    - Move "main loop" out of window? Move it to main, just have globales?
    - "FREE" shit? in main?

Going on 5min break very soon. What? Keep working on this shit. This refactoring is much better. The window is juts one compoennt of this
prograrm. Their is no one compoenent that should contrl the others, execapt main which is best fit for now wher ethe compoents gather 
to work togehters! KEep at it. Quick piss & tea break!

No clue what to do next! 

Steps:
    implement noise
    then just sample points from it
    use sampled points to create lines
    draw lines to screen

All noise will need to be 'seededed'

Noise
    construct(seed)
    sample(x)

ValueNoise1D
    construct(seed)
    sample(x)

I think I have to go to dinner now. I'll go eat, then come back to work straight away. Still needed to finish this crank (1h left), and do 1 final one!

Its 841pm. I have 1D value noise. Feelt like giving up once I saw that gourges cubic graph, LOOK AT THIS GRAPH! Fuck! Now what? 
Well, IDK. I just WELL DESERVED BREAK TIME! 


-------------------------------------------------------------------------------------------------------------------------------------------------------------------


I have no clue what I'm doing. Lets just try what I think is best. 

I need to fix the noise shit.
Options:
    - Just return a list that contains sample points over some interval w/ some dx.
      With this, user can just call it once, and no redo of caluclations. I think this is best.
    - Or, I could have user sample over inteverals of size 1 (2 - 1 = 1, 3 - 2 = 1). I would be recauluting the same thing over and over,
      but would be better approach over what I have now.
    - Stick with what I have now, which is very infeffecient, so many reduntandt calculations constantly doing the same cacullation over and over again.
I think the choice is clear.

FUCK!!! This shit is hard, and its some random math shit, not the actual noise shit, its about sampling. IDK. I think I figured osmething out after 1.5 hours, I guess
thats good, though. I found a solution I'm somewhat happy with even if it was a fucking pain and tediuos. Anywyas, I think more about it after this 5min break.

V(-1)---------------------------------------------------------------------------------------------
interval
dx = ...  
samples_per_sub_interval = ? [sub_start, sub_end), sample start of interval but not end (else duplicates!)


list

for (i = start; i <= end; i++)
  calculate the cubic
  x = i
  for (i = 0; i < samples_per_interval; i++)
    x += dx * i
    sample(x)
    add to sample poitn to list 

  if (i == end)
    x += dx
    sample last point
Will miss very last sample point with this algo!


Hope to god it sampled the correct number of points.
Could also assert.

V1----------------------------------
list sample(start, end, count)
  length = end - start
  dx = (length) / (count - 1)

  list[]

  x_frac = 0
  for (int i = start; i <= end; i++)
    cubic = createCubic(i)
    
    while (x_frac < 1) # [i,i+1) # Don't sample end!
      sample_point = cubic(x_frac)
      list.add(sample_point)
      x_frac += dx

V2----------------------------------------
list sample(start, end, count)
  length = end - start
  dx = (length) / (count - 1)

  list[count]

  i = 0;
  x_int = start;
  x_dec = 0;
  while (i < count)
    cubic = createCubic(x_int)

    while (x_dec < 1) # [x_int, x_int+1)
      sample_point = sample(cubic, x_dec)
      x_dec += dx;
      list[i] = sample_point;
      i++;
    
    x_dec = x_dec - 1.0f # left over fraction
    x_int++

WHAT A PAIN this shit was, not sure it was even worth it. I WAS OPTIMIZING IT SO THAT we only deal with floats that aren't too big.
With tihs algo the floats will always be ~1 or <1! WHY? I barely know about htis floating point shit, ok I do have some experince.

Alright. I'm going on break soon. Lets just take a quick 10 min break. Don't take too long, and relaxe! What to do when I come back?
Talk to chatGPT about my code, see if theirs anything too wrong iwth it. Then IDK, figure it out then.

Feel like shit. Anyways, I think I should focus on code readablity instead of optimizations, atleast when the performance is not < 15FPS.
So, focus on readibilty, that easier to code to, and fix.

Shit is very hard, doesn't help that I'm also in a bit of pain, fuck.


I think I can add octave noise now.

octave(x)

  octaves = ?
  freq = 2
  persitance = ?

  for i = 0 to octaves:
    total = sample(x * 2^(i)) * (perstiance ^ (octaves))

Thats octave, and value noise (1D) done. Maybe do 2D noise, but keep it 2D for now? Draw it on a quads?

Next is 1D perlin.

sample_perlin(x)

  g0 = ? # left gradient
  g1 = ? # right gradient

  r0 = g0 * x_fract
  r1 = g1 * (1 - x_fract)

  return hermite_interpolation(r0, r1, x_fract)

So, I'll need random gradient vectors. In this case its just a


Alright what I've done so far (in 2 days):
- 1D value noise (cubic)
- 1D octave value noise (cubic)
- 1D perlin noise (hermite)
- 1D octave perlin noise (hermite)

Am I 100% done w/ 1D? Yes. Next up is 2D noise!
Well, I can either visualize it in 2D or 3D. Not sure what though.
I could do both. For 2D I'm thinking just to make a texture and put it on a quad,
that would be very easy, or I could draw a bunch of tiny quads and grey scale color them. 
For 3D I could just use cuboids, and the height of the cuboid will be equal to the sample value. 

I think I'm just going to skip 3D noise.
Well, I'll figure that out tomorrow.

GOAL: When performance is ok, choose simplicity over complexity.
      Only deal with complexity when the performance gains are worth it.

Problems: the gui is all fucked up, like I need to change the code to see other shit! 


------------------------------------------------------------------------------------------------------------------------


Ok. Today I will add 2D noise. I'm going to implement it by just drawing it to a quad. I'll figure out 
how to create it as a texture, and then use that to draw on the quad. I'm not 100% sure on 2D noise. 
I presume its just, Multiple 1D noise (for value at least) stacked on top of each other, so if you want to sample some point
(x,y) = v then you just do...you interpolate twice. For gradient you just put gradients at each integer value. Not too hard.

To Do:
- Figure out how to create a 'texture'
- Create 'squares' that I can draw on
- Create the 2D noise

I can later try to visualize it in 3D if I get the rest done and still feel like it. But I think I'll have to use cuboids, I mean
I guess I could see if I could do it with a fine looking mesh.

Alright, 1h and 40m to get this square to render, but its done. What next? 5-min. What after? I need to figure out 
how to 'texture' the square so I can draw 2d noise on it.

BUG: the camera and window are differnt 'sizes' which is causing distoration. IDK.

I'm thinking maybe of just outputting to a image, like BMP, instead of rendering to screen. It does not seem to hard to write a BMP 
creator. But that will be a side-track that will take maybe a couple hours, maybe even the whole day, sounds fun though. Never created 
a non-character file. Or, I could just texture the quad. What would be the simplict thing to do? I would like nice BMPs of my noise. So,
I'll give it this last h of this crank, see where I get from their and replan afterwards! I WANT THE NICE BMPS OF MY NOISE.

This BMP shit, sigh. I'm not sure I can keep going with this shit.


-------------------------------------------------------------------------------------------------------------------


Alright, create_bmp() is done! I think I should create some class that can use to create a BMP file. Like class Image().
Image.save(); --> create_bmp(); For the noise, I would like to just have some Image(), then do:

for each sample of noise (x,y) # sample the noise
  Image.set(x,y,value); # save noise value to pixel

Image.save() # save to image

Yeah, maybe I should, well I'm not sure how the data will start though.

noise(x,y) = value [-1,1]
grey_scale = (value + 1) / 2;

vec3 rgb = vec3(grey_scale) ? Why a vec3 if its just greyscale?

Image[x][y] = rgb;

(0,0) should be bottom left pixel.

Will need to convert interal data struture of Image to something that create_bmp can use.


Image will hold a 2D array of floats that are grey scale values. 

Image
{
  Image(widht, height)
}


Ok, I'm done with this BMP shit. I move back noise. I have to do 2d noise, not 100% on it.

TO DO:
- [DONE] 2D value noise, Cubic interpolation
- [DONE] 2D value noise, Linear interpolation
- [DONE] 2D perlin/gradient noise, hermite interpolation
- [DONE] 1D value noise, linear interpolation

Ok what next? 2D Noise! Ok, but how am I going to test it? I'm going to render it to a BMP.
I'm thinking of commenting out main in main.cpp, then uncommenting main in Image.cpp. Maybe I should make a proper main.
I'll make a second main! That main will be for rendering BMPs! 


Quick piss break, maybe even tea. Those chips were not a good snack! I got 2D linear value noise to render on a BMP! 
Next is to do that for the other 2 noise types. But now quick piss & tea break.

Lets do Cubic next.


TO CHECK: isn't perlin 1D supposed to be zero at integers? Not sure it is.
TO CHECK: make sure random genreators return SAME VALUES! 


----------------------------------------------------------------------------------------------------------------------------


Anyways, what the fuck am I doing?

TO DO:
- [DONE] Octave
- 3d visualizer

TODO: remove bi- from names? 

What else to do? Just finished 2D octave ~33m (very quickly). I guess its 3d visualization. Fuck, I'm a bit scared of this one!
My idea is to either visualize it using a 3D mesh made of traingles or use cuboids, where the height of hte cuboid is equal to the nosie value.
I'm a bit scared since I feel like this requires more knowldge of real-world 3d graphics then what I have. WELL, only one way to find out! 

How about this... Well first, on that shit of know doing it 'right' or not knowing how 'to do it', thats fine. Thats an ok feeling, but the only
way to get over this feeling is to do the actual fucking work, see what fucking happens! Simple as.

Here what I'm thinking: I have two visualing modes: 1) uses cuboid, 2) uses a triangulated mesh
The cuboids should be easier. I also think I'd like for it to move with respect to the camera, like I don't think I'd like it for it to just be sitting 
their, ateast spin or have the camera spin, BUT I can do this last. Also, I'm thinking having a framerate tracker might be a good idea, that way 
I know exactly if I'm fucking up (~60 fps is good, <20 fps is bad!).

Ok, so instancing is the way your SUPPOSED to render on the GPU. First I'll render 1 cube at 
a time, then I'll switch to instances.

TEST: instance vs 1 draw call per cube!

I fucking hate making the vertex for a cuboid VBO!!! I FUCKING HATE IT!!!

IDEA: add a Buffer class that create VBO/EBOs.


Alright, I think its working. I got the cube rendering, god that shit was hard, painful. I swear math is easier then this openGL 3d graphics shit, IDK.
Anyways, what now? I have something rendering that looks like its a cuboid (although all I can see is a square). It most likly works. But I feel like I need
some better way to test it. Also, I think I should add some shading, becaues else its will be very hard to see the diffenrt faces of the cube. 
Also, I'm thikning to switching to a Perpsective camera. I was thiking of flying the camera around in cirlces around the cuboid just to make sure it is a cuboid.
Feel like shit after that cuboid rendering opengl shit. What the FUCK am I doing? The plan is, again, to render the noise in 3D. I'll use the noise as a height map
then I will render a bunch of cuboids, where the size of the cuboid is equal to the noise value that it corrsepodns to. It really shoudn't be so hard, yet this 
shit is somehting else!

TODO: 
- [DONE] Perspective Camera
- [DONE] Shading
- [DONE] 3D visualization of noise w/ cuboids
- [] Instancing

WOW, writing this shit out, is great! Do it more!

v_ndc = projection * view * world * view * v;
Then do perpsective diviosn & culling. 

Big problem! I forgot about the projeciotn matrix! Projection matrix != view matrix. 

Their you go. I got a spinning cube! That shit was too hard. Too painful. I compeletly forgot, was it the perpserive or view matrix, IDK it was one of them.
Fuck! I'm going to take a quick break. 

DONE: spinning diffuse cuboid.

I'm done, I mean I still need to do a thing or too, but I'm done with the major shit [Mar 8, 855pm]. Tool ~5 days.


I'm going to set the instance VBO once. Then I just need to make one call to cuboidRenderer.draw_all_intances()


---------------------------------------------------------------------------------------------------------------------------------------------------------------


Starting work very early (1216pm). What do to? Need to clean up project. Fuck! I need to figure something out for the 2d vs 3d. I think I will just 
add some input (m key for mode) that lets user switch between 2d and 3d mode. I would also like to give user control about what noise they are seeing,
value vs graidnet, regular vs octaev. I also want to let use control the frequcinces and amplitued and number of octavaes.

What about the 2d visualizer? I could break it up into two projects...IDK. Feel like I don't want to do that. What if I let user have print button. 
Also, I compeletly forgot about adding text. Text would make the project look much better, like image text telling you what your looking at "2D value noise using 
bi-cubic interpolation". <--- very cool. 

To Do:
- [DONE] Clean up / Refactor
- [DONE] Feature: switch between 2d and 1d noise
- [] Feature: switch between value & gradient noise
- [] Feature: switch between interpolation schemes
- [] Feature: let user control w/ input number of octaves, frequencies, and amplitude
- [] Feature: let use control camera: revolution radius, up down height, pause spin
- [] Feature: let user control image pixels, and sample interval
- [] Text that says whats going on
- [] Feature: that lets user print out image

I think after doing all this I will be very happy. I have some other shit to do today, sigh. If I want to get this done today I will have to work extra hard!
But, I always have tomorrow.

The STRIDE is number of bytes to get from one attribute to another attribute of the same time. ONLY needed when attributes are interleaved in 1 buffer.

IDEA: move 2d sampling shit out of render2D() and into init()!!!!

Addd a mode enum!

2 ways to get input from glfw
callback()
query(key)

What input do I want, how am I going to use it? Well, mostly just to check what key is pressed. I will also likely only need to check 1 per key pesss, so no duplication.

I'm copyying JDAH. He stole from some guy, I stole from him, were all stealing!

Keys keys[];

Key { isPressed, duplicate }

isPressed tells you if the key is currntlty being pressed, duplicate tells you if is a duplicate (i.e being held down)!


Debug keys IDEAS:
- KEY_? : for wireframe toggle
- KEY_? : for printing state 